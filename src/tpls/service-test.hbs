/**
 * @NOTICE: DO NOT MODIFY THIS FILE
 * Autogenerated with @amjs/api-parser
 * @created {{date}}
 */
const { equal } = require('assert');
const AmjsAjaxService = require('@amjs/ajax-service');
const AmjsFactory = require('@amjs/factory');
const {{capitalCamelize namespace}}{{key}} = require('../../../src/services/{{key}}');

(function()
{
    let sut = new {{capitalCamelize namespace}}{{key}}();
    equal(sut instanceof AmjsAjaxService, true, '{{capitalCamelize namespace}}{{key}} extends AmjsAjaxService');

    sut = AmjsFactory.create('{{capitalCamelize namespace}}{{key}}');
    equal(sut instanceof {{capitalCamelize namespace}}{{key}}, true,
        'Is registered as "{{capitalCamelize namespace}}{{key}}"');
}());

(function()
{
    const allowedMethods = [
    {{#each service.methods as |method|}}
        '{{method}}',
    {{/each}}];

    const path = '{{service.path}}';
    const method = '{{service.method}}';

    const sut = new {{capitalCamelize namespace}}{{key}}();
    equal(sut.$allowedMethods.length === allowedMethods.length, true, `$allowedMethods is: ${allowedMethods.join()}`);
    equal(sut.path === path, true, `path is "${path}"`);
    equal(sut.method === method, true, `method is "${method}"`);
}());

(function()
{
    const model = '{{collection.name}}';
    const sut = new {{capitalCamelize namespace}}{{key}}();
    equal(sut._getModel('{{service.method}}') === model, true, `_getModel returns expected "${model}"`);
    equal(sut._getModel('OPTION') === model, true, '_getModel of invalid method returns "${model}"');
    equal(sut._getModel() === model, true, '_getModel of empty method returns "${model}"');
}());